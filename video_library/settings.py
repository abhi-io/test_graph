"""
Django settings for video_library project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import logging.config
import os
from pathlib import Path
import environ
from corsheaders.defaults import default_headers
from django.core.management.utils import get_random_secret_key

env = environ.Env()
environ.Env.read_env(env_file=".env")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Security : Avoiding hardcoded Credentials
# SECRET_KEY = get_random_secret_key()
# SECRET_KEY = get_random_secret_key()
SECRET_KEY = env.str("SECRET_KEY", "6mu60zk7_6m=kf)^01&bzrvq^j&!1te#7n7&g7((o_9c7b$+*5")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ENABLE_DOCS = env.bool("ENABLE_DOCS", False)

CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = ['https://*.blacktievents.in','https://*.ngrok-free.app','http://127.0.0.1']
CORS_ORIGIN_WHITELIST=[ 'https://7827-2409-40f4-3a-43e6-a9b6-78db-383e-2bad.ngrok-free.app' ]
CORS_ALLOWED_ORIGINS = [ 'http://127.0.0.1:3000','https://video-library.blacktievents.in', 'https://*.ngrok-free.app', 'https://7827-2409-40f4-3a-43e6-a9b6-78db-383e-2bad.ngrok-free.app']
SECURE_CROSS_ORIGIN_OPENER_POLICY = None
ALLOWED_HOSTS = ['*']



# Application definition
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

]

THIRD_PARTY_APPS = [
    "rest_framework",
    "corsheaders",
]

LOCAL_APPS = [
              "users",
              "video_subtitle", 

              ]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'video_library.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'video_library.wsgi.application'



# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': 'video_db',
#     }
# }


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('MYSQL_DATABASE'),
#         'USER': os.getenv('MYSQL_USER'),
#         'PASSWORD': os.getenv('MYSQL_PASSWORD'),
#         'HOST': os.getenv('MYSQL_HOST'),
#         'PORT': os.getenv('MYSQL_PORT'),
#     }
# }

# DATABASES = {"default": .env.db(default= "")}


#reade databse credentials from .env file
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': env('POSTGRES_PORT'),
        'ATOMIC_REQUESTS': True,
        'CONN_MAX_AGE': 600,
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "console": {"format": "%(name)-12s %(levelname)-8s %(message)s"},
            "file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
        },
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "console"},
            "file": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "formatter": "file",
                "filename": "debug.log",
            },
        },
        "loggers": {"": {"level": "DEBUG", "handlers": ["console", "file"]}},
    }
)

logger = logging.getLogger(__name__)



#Auth configs
AUTH_USER_MODEL = "users.APIUser"
DEFAULT_PASSWORD = "passw0rd"

# CORS configurations
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATIC_URL = '/api/static/'
MEDIA_URL = "/api/user_data/"
MEDIA_ROOT = os.path.join(BASE_DIR, "user_data")

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# Image url configureations
BASIC_IMAGE_URL = env("BASIC_IMAGE_URL", default="http://localhost:8000/api/media")
BASIC_TEMPLATE_IMAGE_URL = env("BASIC_TEMPLATE_IMAGE_URL", default="http://localhost:8000/api/media/images")

#S3 configurations
S3_ACCESS_KEY = env("S3_ACCESS_KEY", default="__NOTSET__")
S3_SECRET_KEY = env("S3_SECRET_KEY", default="__NOTSET__")
BUCKET_NAME = env("BUCKET_NAME", default="__NOTSET__")
S3_BASIC_URL = env("S3_BASIC_URL", default="__NOTSET__")
# DATA_UPLOAD_MAX_MEMORY_SIZE = 10*1024*1024

#   RESET PASSWORD
RESET_PASSWORD_LINK = env("RESET_PASSWORD_LINK", default="__NOTSET__")


# Jwt configurations
JWT_SECRET = env("JWT_SECRET", default="")
AES_SECRET = env("AES_SECRET", default="")
AES_IV = env("AES_IV", default="")
JWT_ALGORITHM = env("JWT_ALGORITHM", default="")
TOKEN_EXPIRY = 7200000  # 2 hr
REFRESH_TOKEN_EXPIRY = 9000000  # 2.5 hr

# Email configurations
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = "a@gmail.com"
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Twilio Configurations
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID", default="")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN", default="")
TWILIO_PHONE_FROM = env("TWILIO_PHONE_FROM", default="")

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUDIO_FORMAT = {"audio/mpeg", "audio/mp3", "audio/wav", "audio/ogg"}
IMAGE_FORMAT = {"image/jpeg", "image/png"}
UPLOAD_AUDIO_DIR = "uploadaudio"
RECOGNISE_AUDIO_DIR = "recogniseaudio"
NEWS_DIR = "newsdata"
#REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.BasicAuthentication',
#         'rest_framework.authentication.SessionAuthentication',
#         'authentication.authentication.JwtTokensAuthentication'
#     ]
# }


SWAGGER_SETTINGS = {
    "exclude_namespaces": [], # List URL namespaces to ignore
    "api_version": '0.1',  # Specify your API's version
    # "api_path": "/",  # Specify the path to your API not a root level
    "enabled_methods": [  # Specify which methods to enable in Swagger UI
        'get',
        'post',
        'put',
        'patch',
        'delete'
    ],
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'X-CSRFToken'
        }
    },
    "api_key": 'X-CSRFToken', # An API key
    "is_authenticated": False,  # Set to True to enforce user authentication,
    "is_superuser": False,  # Set to True to enforce admin only access
}
